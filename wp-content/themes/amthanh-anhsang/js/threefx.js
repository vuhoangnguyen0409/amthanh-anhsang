var threeFX=function(){"use strict";var e=document;return e.addEventListener("AXStartJS",function(e){threeFX.reload()}),e.addEventListener("DOMContentLoaded",function(){threeFX.init()}),{loaded:!1,init:function(){},reload:function(){},glitchSlider:{el:null,inner:null,slides:[],bullets:[],renderer:null,scene:null,clock:null,camera:null,mat:null,images:[],mesh:null,data:{current:0,selected:0,next:1,total:0,delta:0},state:{animating:!1,text:!1,initial:!0},textures:null,frag:"\n                varying vec2 vUv;\n\n                uniform sampler2D texture1;\n                uniform sampler2D texture2;\n                uniform sampler2D disp;\n\n                uniform float dispPower;\n                uniform float intensity;\n\n                uniform vec2 size;\n                uniform vec2 res;\n\n\n                void main() {\n                  vec2 uv = vUv;\n                  \n                  vec4 disp = texture2D(disp, uv);\n                  vec2 dispVec = vec2(disp.x, disp.y);\n                  \n                  vec2 distPos1 = uv + (dispVec * intensity * dispPower);\n                  vec2 distPos2 = uv + (dispVec * -(intensity * (1.0 - dispPower)));\n                  \n                  vec4 _texture1 = texture2D(texture1, distPos1);\n                  vec4 _texture2 = texture2D(texture2, distPos2);\n                  \n                  gl_FragColor = mix(_texture1, _texture2, dispPower);\n                }\n                ",vert:"\n                varying vec2 vUv;\n                void main() {\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            ",init:function(){let e=threeFX.glitchSlider;e.kill(),document.querySelector(".glitch-slider")&&(e.el=document.querySelector(".glitch-slider"),e.inner=e.el.querySelector(".glitch-slider__inner"),e.slides=[...e.el.querySelectorAll(".glitch-slide")],e.bullets=[...e.el.querySelectorAll(".glitch-slider-bullet")],e.slides.forEach((t,n)=>{e.images.push(t.getAttribute("data-slide-bg"))}),e.data.total=e.images.length-1,e.setup(),e.cameraSetup(),e.loadTextures(),e.createMesh(),e.setStyles())},setStyles:function(){let e=threeFX.glitchSlider;e.slides.forEach((e,t)=>{0!==t&&gsap.set(e,{autoAlpha:0})}),e.bullets.forEach((e,t)=>{if(0===t)return;let n=e.querySelector(".glitch-slider-bullet__text"),i=e.querySelector(".glitch-slider-bullet__line");gsap.set(n,{alpha:.25}),gsap.set(i,{scaleX:0,transformOrigin:"left"})})},cameraSetup:function(){let e=threeFX.glitchSlider;e.camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,1e3),e.renderer.setSize(window.innerWidth,window.innerHeight),e.camera.position.z=1e3},setup:function(){let e=threeFX.glitchSlider;e.scene=new THREE.Scene,e.background=new THREE.Color(3355443),e.clock=new THREE.Clock(!0),e.renderer=new THREE.WebGLRenderer({alpha:!0}),e.inner.appendChild(e.renderer.domElement)},loadTextures:function(){let e=threeFX.glitchSlider,t=new THREE.TextureLoader;t.crossOrigin="",e.textures=[],e.images.forEach((n,i)=>{let l=t.load(n+"?v="+Date.now(),e.render.bind(this,i));l.minFilter=THREE.LinearFilter,l.generateMipmaps=!1,0===i&&e.mat&&(e.mat.uniforms.size.value=[l.image.naturalWidth,l.image.naturalHeight]),e.textures.push(l)}),e.disp=t.load(theme.globals.path+"/images/disp-texture.png",e.render),e.disp.magFilter=e.disp.minFilter=THREE.LinearFilter},createMesh:function(){let e=threeFX.glitchSlider;e.mat=new THREE.ShaderMaterial({uniforms:{dispPower:{type:"f",value:0},intensity:{type:"f",value:.5},res:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},size:{value:new THREE.Vector2(1,1)},texture1:{type:"t",value:e.textures[0]},texture2:{type:"t",value:e.textures[1]},disp:{type:"t",value:e.disp}},transparent:!0,vertexShader:e.vert,fragmentShader:e.frag});let t=new THREE.PlaneBufferGeometry(1920,1080,1);e.mesh=new THREE.Mesh(t,e.mat),e.scene.add(e.mesh)},afterLoad:function(){let e=threeFX.glitchSlider,t=e.slides[e.data.current],n=t.querySelectorAll(".glitch-slide__img"),i=t.querySelectorAll(".glitch-slider__text-line div"),l=gsap.timeline({paused:!0});l.to(e.el,{opacity:1,duration:1},0),l.fromTo(".glitch-slider__bullets",1,{opacity:0,x:100},{opacity:1,x:0,ease:Power4.easeOut},1),l.fromTo(".glitch-slider-prev",1,{opacity:0,y:-100},{opacity:1,y:0,ease:Power4.easeOut},1),l.fromTo(".glitch-slider-next",1,{opacity:0,y:100},{opacity:1,y:0,ease:Power4.easeOut},1),l.staggerFromTo(n,1.5,{yPercent:300,scaleY:1.5},{yPercent:0,scaleY:1,ease:Expo.easeInOut},.075,.5),i&&l.fromTo(i,{yPercent:100,duration:2},{yPercent:0,ease:Power4.easeOut},2),l.play(),e.el.classList.add("is-active"),e.listeners()},transitionNext:function(){let e=threeFX.glitchSlider;gsap.to(e.mat.uniforms.dispPower,2.5,{value:1,ease:Expo.easeInOut,onUpdate:e.render,onComplete:()=>{e.mat.uniforms.dispPower.value=0,e.changeTexture(),e.render.bind(e),e.data.current=e.data.selected,e.state.animating=!1}});let t=e.slides[e.data.current],n=e.slides[e.data.next],i=t.querySelectorAll(".glitch-slide__img"),l=n.querySelectorAll(".glitch-slide__img"),r=t.querySelectorAll(".glitch-slider__text-line div"),a=n.querySelectorAll(".glitch-slider__text-line div"),c=e.bullets[e.data.current],o=e.bullets[e.data.next],s=c.querySelectorAll(".glitch-slider-bullet__text"),u=o.querySelectorAll(".glitch-slider-bullet__text"),d=c.querySelectorAll(".glitch-slider-bullet__line"),m=o.querySelectorAll(".glitch-slider-bullet__line"),v=gsap.timeline({paused:!0});e.state.initial&&(e.state.initial=!1),v.staggerFromTo(i,1.5,{yPercent:0,scale:1},{yPercent:-300,scaleY:1.5,ease:Expo.easeInOut},.075).to(s,1.5,{alpha:.25,ease:Linear.easeNone},0).set(d,{transformOrigin:"right"},0).to(d,1.5,{scaleX:0,ease:Expo.easeInOut},0),r&&v.fromTo(r,2,{yPercent:0},{yPercent:-100,ease:Power4.easeInOut},0),v.set(t,{autoAlpha:0}).set(n,{autoAlpha:1},1),a&&v.fromTo(a,2,{yPercent:100},{yPercent:0,ease:Power4.easeOut},1.5),v.staggerFromTo(l,1.5,{yPercent:300,scaleY:1.5},{yPercent:0,scaleY:1,ease:Expo.easeInOut},.075,1).to(u,1.5,{alpha:1,ease:Linear.easeNone},1).set(m,{transformOrigin:"left"},1).to(m,1.5,{scaleX:1,ease:Expo.easeInOut},1),v.play()},onWindowResize:function(){let e=threeFX.glitchSlider;e.camera.aspect=window.innerWidth/window.innerHeight,e.camera.updateProjectionMatrix(),e.mat.uniforms.texture1.value=e.textures[e.data.current],e.mat.uniforms.texture2.value=e.textures[e.data.next],e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.render(e.scene,e.camera)},nextSlide:function(){let e=threeFX.glitchSlider;if(e.state.animating)return;e.state.animating=!0;let t=e.data.current===e.data.total?0:e.data.current+1;e.data.next=t,e.data.selected=t,e.changeTexture(),e.transitionNext()},prevSlide:function(){let e=threeFX.glitchSlider;if(e.state.animating)return;e.state.animating=!0;let t=0===e.data.current?e.data.total:e.data.current-1;e.data.next=t,e.data.selected=t,e.changeTexture(),e.transitionNext()},bulletsNav:function(e){e.preventDefault();let t=threeFX.glitchSlider;if(t.state.animating)return;let n=0,i=e.target;for(;i.previousElementSibling;)i=i.previousElementSibling,n++;t.data.current!==n&&(t.state.animating=!0,t.data.next=n,t.data.selected=n,t.changeTexture(),t.transitionNext())},arrowsNav:function(e){e.preventDefault();let t=threeFX.glitchSlider;e.currentTarget.classList.contains("glitch-slider-next")?t.nextSlide():t.prevSlide()},changeTexture:function(){let e=threeFX.glitchSlider;e.mat.uniforms.texture1.value=e.textures[e.data.current],e.mat.uniforms.texture2.value=e.textures[e.data.next]},listeners:function(){let e=threeFX.glitchSlider;window.addEventListener("resize",e.onWindowResize,!1),window.addEventListener("wheel",e.nextSlide,{passive:!0}),document.querySelector(".glitch-slider__bullets").addEventListener("click",e.bulletsNav,!1),document.querySelector(".glitch-slider__arrows .glitch-slider-prev").addEventListener("click",e.arrowsNav,!1),document.querySelector(".glitch-slider__arrows .glitch-slider-next").addEventListener("click",e.arrowsNav,!1)},render:function(e,t){let n=threeFX.glitchSlider;n.renderer.render(n.scene,n.camera),e===n.data.total&&n.afterLoad()},kill:function(){let e=threeFX.glitchSlider;null!==e.renderer&&(window.removeEventListener("resize",e.onWindowResize,!1),window.removeEventListener("wheel",e.nextSlide,{passive:!0}),e.renderer.dispose(),e.scene.dispose(),e.mat=null,e.images=[],e.data={current:0,next:1,total:0,delta:0},e.state={animating:!1,text:!1,initial:!0},e.textures=null)}},glitchGL:{imageSrc:null,renderer:null,scene:null,camera:null,texture:null,mesh:null,textureProgress:0,currentIndex:0,nextIndex:0,time:0,data:[{}],impulses:null,firstRender:!1,canvas:null,followSpot:null,slidesSpot:null,loopRequest:null,anim:{},follow:{x:0,y:0},vertex:"\n                #define PI 3.14159265359\n                uniform float u_waveIntensity;\n                uniform float u_offset;\n                uniform float u_progress;\n                uniform float u_direction;\n                uniform float u_time;\n                varying vec2 vUv;\n                void main(){\n                    vec3 pos = position.xyz;\n                    float distance = length(uv.xy - 0.5 );\n                    float sizeDist = length(vec2(0.5,0.5));\n                    float normalizedDistance = distance/sizeDist ;\n                    float stickOutEffect = normalizedDistance ;\n                    float stickInEffect = -normalizedDistance ;\n                    float stickEffect = mix(stickOutEffect,stickInEffect, u_direction);\n                    float stick = 0.5;\n                    float waveIn = u_progress*(1. / stick); \n                    float waveOut =  -( u_progress - 1.) * (1./(1.-stick) );\n                    waveOut = pow(smoothstep(0.,1.,waveOut),0.7);\n                    float stickProgress = min(waveIn, waveOut);\n                    float offsetInProgress = clamp(waveIn,0.,1.);\n                    float offsetOutProgress = clamp(1.-waveOut,0.,1.);\n                    float offsetProgress = mix(offsetInProgress,offsetOutProgress,u_direction);\n                    float stickOffset = u_offset;\n                    pos.z += stickEffect * stickOffset * stickProgress  - u_offset * offsetProgress;\n                    pos.z += sin(distance * 8. - u_time * 2. )  * u_waveIntensity;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n                    vUv = uv;\n                }\n            ",fragment:"\n                uniform vec2 u_resolution;\n                uniform sampler2D u_texture;\n                uniform sampler2D u_texture2;\n                uniform vec2 u_textureFactor;\n                uniform vec2 u_texture2Factor;\n                uniform float u_textureProgress;\n                uniform vec2 u_rgbPosition;\n                uniform vec2 u_rgbVelocity;\n                varying vec2 vUv;\n                vec2 centeredAspectRatio(vec2 uvs, vec2 factor){\n                    return uvs * factor - factor /2. + 0.5;\n                }\n                void main(){\n                    vec2 normalizedRgbPos = u_rgbPosition / u_resolution;\n                    normalizedRgbPos.y = 1. - normalizedRgbPos.y; \n                    vec2 vel = u_rgbVelocity;\n                    float dist = distance(normalizedRgbPos + vel / u_resolution, vUv.xy);\n                    float ratio = clamp(1.0 - dist * 5., 0., 1.);\n                    vec4 tex1 = vec4(1.);\n                    vec4 tex2 = vec4(1.);\n                    vec2 uv = vUv;\n                    uv.x -= sin(uv.y) * ratio / 100. * (vel.x + vel.y) / 7.;\n                    uv.y -= sin(uv.x) * ratio / 100. * (vel.x + vel.y) / 7.;\n                    tex1.r = texture2D(u_texture, centeredAspectRatio(uv, u_textureFactor )).r;\n                    tex2.r = texture2D(u_texture2, centeredAspectRatio(uv, u_textureFactor )).r;\n                    uv.x -= sin(uv.y) * ratio / 150. * (vel.x + vel.y) / 7.;\n                    uv.y -= sin(uv.x) * ratio / 150. * (vel.x + vel.y) / 7.;\n                    tex1.g = texture2D(u_texture, centeredAspectRatio(uv, u_textureFactor )).g;\n                    tex2.g = texture2D(u_texture2, centeredAspectRatio(uv, u_textureFactor )).g;\n                    uv.x -= sin(uv.y) * ratio / 300. * (vel.x + vel.y) / 7.;\n                    uv.y -= sin(uv.x) * ratio / 300. * (vel.x + vel.y) / 7.;\n                    tex1.b = texture2D(u_texture, centeredAspectRatio(uv, u_textureFactor )).b;\n                    tex2.b = texture2D(u_texture2, centeredAspectRatio(uv, u_textureFactor )).b;\n                    vec4 fulltex1 = texture2D(u_texture, centeredAspectRatio(vUv, u_textureFactor) );\n                    vec4 fulltex2 = texture2D(u_texture2, centeredAspectRatio(vUv, u_texture2Factor));\n                    vec4 mixedTextures =  mix(tex1,tex2,u_textureProgress);\n                    gl_FragColor = mixedTextures;\n                }\n            ",init:function(){const e=threeFX.glitchGL,t=document.getElementById("fx-wgl-glitch");e.kill(),t&&(e.imageSrc=t.getAttribute("data-image-src"),e.canvas=document.getElementById("fx-wgl-glitch-canvas"),e.setup(),e.createPlane(),e.render(),e.anim.animInterval&&clearInterval(e.anim.animInterval),e.anim.animTimeout&&clearTimeout(e.anim.animTimeout),e.anim.animTimeout=setTimeout(e.startAnim,8e3),window.addEventListener("resize",e.onWindowResize,!1),window.addEventListener("mousemove",e.mouseMove,!1))},setup:function(){const e=threeFX.glitchGL;e.camera=new THREE.PerspectiveCamera(50,1,.1,1e4),e.camera.position.z=.1,e.scene=new THREE.Scene,e.camera.lookAt=e.scene.position,e.renderer=new THREE.WebGLRenderer({antialias:!1,alpha:!0,canvas:e.canvas}),e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.setPixelRatio(window.devicePixelRatio),e.texture=(new THREE.TextureLoader).load(e.imageSrc,e.calculateAspectRatioFactor.bind(this,0)),e.impulses=e.data.map(e=>new THREE.Vector2(1,1))},render:function(){const e=threeFX.glitchGL;e.firstRender||(e.firstRender=!0),e.renderer.render(e.scene,e.camera)},getViewSize:function(){const e=threeFX.glitchGL,t=e.camera.fov*Math.PI/180;return Math.abs(e.camera.position.z*Math.tan(t/2)*2)},getPlaneSize:function(){const e=threeFX.glitchGL.getViewSize();return{width:.95*e,height:e}},calculateAspectRatioFactor:function(e,t){const n=threeFX.glitchGL;!1===n.canvas.classList.contains("is-loaded")&&n.canvas.classList.add("is-loaded");const i=n.getPlaneSize(),l=window.innerWidth/window.innerHeight,r=i.width/i.height*l,a=n.texture.image.width/n.texture.image.height;let c=1,o=1;r>a?(c=1,o=1/r*a):(c=1*r/a,o=1),n.impulses[e]=new THREE.Vector2(c,o),n.currentIndex===e&&(n.mesh.material.uniforms.u_textureFactor.value=n.impulses[e],n.mesh.material.uniforms.u_textureFactor.needsUpdate=!0),n.nextIndex===e&&(n.mesh.material.uniforms.u_texture2Factor.value=n.impulses[e],n.mesh.material.uniforms.u_texture2Factor.needsUpdate=!0),n.firstRender&&(n.loadedEntries++,n.render())},createPlane:function(){const e=threeFX.glitchGL,{width:t,height:n}=(e.getViewSize(),e.getPlaneSize()),i=new THREE.PlaneBufferGeometry(t,n,60,60),l=new THREE.ShaderMaterial({uniforms:{u_texture:{type:"t",value:e.texture},u_textureFactor:{type:"f",value:e.impulses[e.currentIndex]},u_texture2:{type:"t",value:e.texture},u_texture2Factor:{type:"f",value:e.impulses[e.nextIndex]},u_textureProgress:{type:"f",value:e.textureProgress},u_offset:{type:"f",value:8},u_progress:{type:"f",value:0},u_direction:{type:"f",value:1},u_effect:{type:"f",value:0},u_time:{type:"f",value:e.time},u_waveIntensity:{type:"f",value:0},u_resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},u_rgbPosition:{type:"v2",value:new THREE.Vector2(window.innerWidth/2,window.innerHeight/2)},u_rgbVelocity:{type:"v2",value:new THREE.Vector2(0,0)}},vertexShader:e.vertex,fragmentShader:e.fragment,side:THREE.DoubleSide}),r=new THREE.Mesh(i,l);e.scene.add(r),e.mesh=r},onWindowResize:function(){const e=threeFX.glitchGL;e.renderer.setSize(window.innerWidth,window.innerHeight),e.mesh.material.uniforms.u_resolution.value=new THREE.Vector2(window.innerWidth,window.innerHeight),e.calculateAspectRatioFactor(0,e.texture)},updateStickEffect:function({direction:e}){threeFX.glitchGL.mesh.material.uniforms.u_direction.value=e},updateRgbEffect:function({position:e,velocity:t}){const n=threeFX.glitchGL;n.mesh.material.uniforms.u_rgbPosition.value=new THREE.Vector2(e.x,e.y),n.mesh.material.uniforms.u_rgbVelocity.value=new THREE.Vector2(t.x,t.y),n.loopRequest||n.render()},mouseMove:function(e){const t=threeFX.glitchGL;t.anim.animInterval&&clearInterval(t.anim.animInterval),t.anim.animTimeout&&clearTimeout(t.anim.animTimeout),t.anim.animTimeout=setTimeout(t.startAnim,2e3),t.onMouseMove(e)},onMouseMove:function(e){const t=threeFX.glitchGL;var n=e.clientX/window.innerWidth-.5,i=e.clientY/window.innerHeight-.5;gsap.to(t.canvas,1,{y:40*i,x:40*n,ease:"power3.out"}),t.followSpot&&(t.followSpot.stop(),t.followSpot=null),t.followSpot=t.reach({from:{x:t.follow.x,y:t.follow.y},to:{x:e.clientX,y:e.clientY},velocity:{x:100*t.follow.vx,y:100*t.follow.vy},stiffness:50,damping:50,mass:1}).start({update:e=>{const n={x:e.x-t.follow.x,y:e.y-t.follow.y};t.updateRgbEffect({position:e,velocity:n}),t.follow={x:e.x,y:e.y,vx:n.x,vy:n.y}},complete:()=>{t.updateRgbEffect({position:t.follow,velocity:{x:0,y:0}}),t.follow.vx=0,t.follow.vy=0}})},reach:function({from:e,to:t,restDelta:n=.01}){let i=Object.assign({},e),l=Object.keys(e),r={current:null},a=function(e,c){if(0===l.length)return cancelAnimationFrame(r.current),r.current=null,void c(i);l.slice();for(var o,s,u=l.length;u>=0;u--)s=l[u],o=i[s]+.1*(t[s]-i[s]),Math.abs(t[s]-o)<n?(i[s]=t[s],l.splice(u,1),u--):i[s]=o;e(i),r.current=requestAnimationFrame(a)};return{start:function({update:e,complete:t}){return a=a.bind(null,e,t),r.current=requestAnimationFrame(a),{stop:function(){cancelAnimationFrame(r.current),r.current=null}}}}},scheduleLoop:function(){const e=threeFX.glitchGL;e.loopRequest||e.loop()},loop:function(){const e=threeFX.glitchGL;e.render(),e.time+=.1,e.mesh.material.uniforms.u_time.value=e.time,e.loopRequest=requestAnimationFrame(e.loop)},cancelLoop:function(){const e=threeFX.glitchGL;cancelAnimationFrame(e.loopRequest),e.loopRequest=null},cords:[[{clientX:858,clientY:392,delay:30},{clientX:849,clientY:414,delay:31},{clientX:840,clientY:430,delay:32},{clientX:827,clientY:447,delay:32},{clientX:819,clientY:457,delay:33},{clientX:806,clientY:470,delay:33},{clientX:793,clientY:481,delay:33},{clientX:779,clientY:493,delay:32},{clientX:755,clientY:512,delay:54},{clientX:740,clientY:523,delay:33},{clientX:728,clientY:530,delay:32},{clientX:715,clientY:536,delay:32},{clientX:704,clientY:540,delay:33},{clientX:691,clientY:544,delay:32},{clientX:676,clientY:545,delay:33},{clientX:658,clientY:546,delay:31},{clientX:640,clientY:546,delay:32},{clientX:618,clientY:545,delay:33},{clientX:594,clientY:542,delay:33},{clientX:568,clientY:539,delay:35},{clientX:542,clientY:534,delay:31},{clientX:518,clientY:528,delay:30},{clientX:491,clientY:521,delay:30},{clientX:467,clientY:514,delay:32},{clientX:444,clientY:505,delay:32},{clientX:420,clientY:494,delay:32},{clientX:400,clientY:482,delay:33},{clientX:387,clientY:460,delay:33},{clientX:379,clientY:431,delay:33},{clientX:377,clientY:385,delay:38},{clientX:391,clientY:343,delay:33},{clientX:405,clientY:321,delay:32},{clientX:422,clientY:306,delay:33},{clientX:444,clientY:297,delay:31},{clientX:468,clientY:288,delay:34},{clientX:514,clientY:266,delay:32},{clientX:554,clientY:244,delay:32},{clientX:592,clientY:227,delay:34},{clientX:649,clientY:205,delay:29},{clientX:723,clientY:172,delay:42},{clientX:765,clientY:152,delay:29},{clientX:797,clientY:133,delay:32},{clientX:808,clientY:123,delay:33},{clientX:810,clientY:118,delay:32},{clientX:805,clientY:115,delay:31},{clientX:786,clientY:109,delay:33},{clientX:736,clientY:106,delay:32},{clientX:672,clientY:106,delay:32},{clientX:602,clientY:108,delay:34},{clientX:543,clientY:115,delay:33},{clientX:488,clientY:126,delay:32},{clientX:444,clientY:140,delay:28},{clientX:390,clientY:155,delay:51},{clientX:358,clientY:164,delay:30},{clientX:322,clientY:178,delay:42},{clientX:302,clientY:189,delay:31},{clientX:279,clientY:207,delay:36},{clientX:261,clientY:227,delay:35},{clientX:244,clientY:248,delay:28},{clientX:229,clientY:266,delay:27},{clientX:220,clientY:279,delay:32},{clientX:214,clientY:294,delay:31},{clientX:212,clientY:307,delay:32},{clientX:212,clientY:327,delay:43},{clientX:213,clientY:339,delay:32},{clientX:219,clientY:351,delay:35},{clientX:225,clientY:360,delay:25},{clientX:234,clientY:369,delay:31},{clientX:249,clientY:382,delay:48},{clientX:262,clientY:391,delay:32},{clientX:279,clientY:401,delay:34},{clientX:303,clientY:407,delay:32},{clientX:343,clientY:411,delay:32},{clientX:393,clientY:415,delay:40},{clientX:447,clientY:418,delay:43},{clientX:482,clientY:430,delay:29},{clientX:499,clientY:443,delay:34},{clientX:507,clientY:463,delay:32},{clientX:508,clientY:500,delay:35},{clientX:502,clientY:538,delay:30},{clientX:497,clientY:571,delay:36},{clientX:494,clientY:595,delay:26},{clientX:490,clientY:613,delay:32},{clientX:481,clientY:629,delay:33},{clientX:464,clientY:648,delay:32},{clientX:445,clientY:668,delay:33},{clientX:424,clientY:689,delay:32},{clientX:410,clientY:703,delay:32},{clientX:407,clientY:707,delay:31},{clientX:420,clientY:707,delay:72},{clientX:452,clientY:706,delay:32},{clientX:521,clientY:667,delay:54},{clientX:551,clientY:633,delay:26},{clientX:567,clientY:591,delay:39},{clientX:575,clientY:545,delay:26},{clientX:578,clientY:514,delay:32},{clientX:579,clientY:478,delay:40},{clientX:579,clientY:462,delay:33},{clientX:577,clientY:454,delay:32},{clientX:575,clientY:452,delay:39},{clientX:574,clientY:450,delay:71},{clientX:574,clientY:444,delay:33},{clientX:578,clientY:427,delay:32},{clientX:589,clientY:402,delay:32},{clientX:616,clientY:352,delay:53},{clientX:629,clientY:331,delay:29},{clientX:641,clientY:317,delay:26},{clientX:651,clientY:310,delay:170},{clientX:686,clientY:310,delay:32},{clientX:755,clientY:310,delay:32},{clientX:857,clientY:310,delay:28}]],startAnim:function(){const e=threeFX.glitchGL;let t=0;const n=window.innerWidth/1200,i=window.innerHeight/800;e.anim.animNumber=Math.floor(Math.random()*e.cords.length),e.follow.x=e.cords[e.anim.animNumber][t].clientX*n,e.follow.y=e.cords[e.anim.animNumber][t].clientY*i,e.follow.vx=0,e.follow.vy=0,e.anim.animInterval=setInterval(()=>{const l={clientX:e.cords[e.anim.animNumber][t].clientX*n,clientY:e.cords[e.anim.animNumber][t].clientY*i};e.onMouseMove(l),e.cords[e.anim.animNumber][++t]||(clearInterval(e.anim.animInterval),e.anim.animTimeout=setTimeout(e.startAnim,2e3))},e.cords[e.anim.animNumber][t+1].delay)},kill:function(){const e=threeFX.glitchGL;null!==e.renderer&&(window.removeEventListener("mousemove",e.mouseMove,!0),window.removeEventListener("resize",e.onWindowResize,!1),e.cancelLoop(),e.scene.remove(e.mesh),e.renderer.dispose(),e.texture.dispose(),e.scene.dispose())}}}}();